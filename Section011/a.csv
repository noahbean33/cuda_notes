==PROF== Connected to process 3909097 (/mnt/c/Users/hamdy/cuda_course/CUDA_Course/Section011/naive)
Matrix multiplication completed using CUDA Cores (FP16).
==PROF== Disconnected from process 3909097
"ID","Process ID","Process Name","Host Name","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description","Estimated Speedup Type","Estimated Speedup"
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/second","6794059480.77",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/second","1407864086.69",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","3579258",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","98.89",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","1.71",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","nsecond","2540384",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","99.25",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","13.17",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","3563802.26",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","98.89",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","PM Sampling","Maximum Buffer Size","byte","3276800",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","PM Sampling","Dropped Samples","sample","0",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","PM Sampling","Maximum Sampling Interval","nsecond","8000",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","PM Sampling","# Pass Groups","","2",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.93",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.93",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","23.37",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.93",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.12",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","84.46"
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","byte/second","7453310995.50",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","74.20",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","98.89",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","91.93",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","95.35",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","98.89",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 12.0 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","61.8"
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","23.38",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.23",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Scheduler Statistics","No Eligible","%","76.62",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","11.73",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.52",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 4.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 11.73 active warps per scheduler, but only an average of 1.52 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","1.112"
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","50.17",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","50.18",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.98",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 35.3 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 70.4% of the total average of 50.2 cycles between issuing two instructions.","global","1.112"
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","832781.47",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","126582784",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","832886.92",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","126598812",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Block Size","","256",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Grid Size","","4096",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","30",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","byte","8192",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","byte/block","1024",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","# SMs","SM","38",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Threads","thread","1048576",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Uses Green Context","","0",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Launch Statistics","Waves Per SM","","17.96",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Occupancy","Block Limit Registers","block","8",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Occupancy","Block Limit Warps","block","6",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","48",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","100",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Occupancy","Achieved Occupancy","%","97.75",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","46.92",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","295848",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","138076160",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","3563802.26",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","135926318",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","3079781.38",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","81379224",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","3563802.26",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","135926318",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","3562291.65",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","543705272",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.02",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Source Counters","Branch Instructions","inst","2162688",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Source Counters","Branch Efficiency","%","100",
"0","3909097","naive","127.0.0.1","matMulCUDA(__half *, __half *, __half *)","1","7","(16, 16, 1)","(64, 64, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","0",
